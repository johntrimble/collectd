name: Release

on:
  push:
    branches: insights-multiarch

jobs: 
  release:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with: 
          submodules: true
      - name: Setup Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          version: latest
      - name: Build collectd in docker
        run: |
          set -x
          RELEASE_VERSION="${GITHUB_REF##*/}"
          RELEASE_VERSION="${RELEASE_VERSION:1}"
          debugoutput_arm64="insights-collectd-debug-${RELEASE_VERSION}_arm64.tar.gz"
          outputgz_arm64="insights-collectd-${RELEASE_VERSION}_arm64.tar.gz"
          outputzip_arm64="insights-collectd-${RELEASE_VERSION}_arm64.zip"
          debugoutput_amd64="insights-collectd-debug-${RELEASE_VERSION}_amd64.tar.gz"
          outputgz_amd64="insights-collectd-${RELEASE_VERSION}_amd64.tar.gz"
          outputzip_amd64="insights-collectd-${RELEASE_VERSION}_amd64.zip"

          # Build arm64 assets
          image_arm64=collectd-bundle-arm
          docker buildx build --platform linux/arm64 --build-arg insight_version=${RELEASE_VERSION} -t $image_arm64 .

          cid=$(docker create $image_arm64 true)

          docker export $cid | tar --delete 'dev' 'proc' 'etc' 'sys' 'collectd-symbols' | gzip -f - > $outputgz_arm64
          docker export $cid | tar --delete 'dev' 'proc' 'etc' 'sys' 'collectd' | gzip -f - > $debugoutput_arm64
          tar xzf $outputgz_arm64 && zip $outputzip_arm64 $(tar ztf $outputgz_arm64)

          # Build amd64 assets
          image_amd64=collectd-bundle-amd
          docker build --build-arg insight_version=${RELEASE_VERSION} -t $image_amd64 .

          cid=$(docker create $image_amd64 true)

          docker export $cid | tar --delete 'dev' 'proc' 'etc' 'sys' 'collectd-symbols' | gzip -f - > $outputgz_amd64
          docker export $cid | tar --delete 'dev' 'proc' 'etc' 'sys' 'collectd' | gzip -f - > $debugoutput_amd64
          tar xzf $outputgz_amd64 && zip $outputzip_amd64 $(tar ztf $outputgz_amd64)

          # Create release
          assets=()
          for asset in $outputzip_arm64 $outputgz_arm64 $debugoutput_arm64 $outputzip_amd64 $outputgz_amd64 $debugoutput_amd64; do
            assets+=("-a" "$asset")
          done

          hub release create --prerelease "${assets[@]}" -m "v$RELEASE_VERSION" "v$RELEASE_VERSION"
      
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
